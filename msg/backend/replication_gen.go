package backend

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *BlockSyncOffset) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "db"
	o = append(o, 0x85, 0xa2, 0x64, 0x62)
	o = msgp.AppendString(o, z.DB)
	// string "ulid"
	o = append(o, 0xa4, 0x75, 0x6c, 0x69, 0x64)
	o = msgp.AppendString(o, z.Ulid)
	// string "minT"
	o = append(o, 0xa4, 0x6d, 0x69, 0x6e, 0x54)
	o = msgp.AppendInt64(o, z.MinT)
	// string "path"
	o = append(o, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "Offset"
	o = append(o, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendInt64(o, z.Offset)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlockSyncOffset) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "db":
			z.DB, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DB")
				return
			}
		case "ulid":
			z.Ulid, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ulid")
				return
			}
		case "minT":
			z.MinT, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinT")
				return
			}
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "Offset":
			z.Offset, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlockSyncOffset) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.DB) + 5 + msgp.StringPrefixSize + len(z.Ulid) + 5 + msgp.Int64Size + 5 + msgp.StringPrefixSize + len(z.Path) + 7 + msgp.Int64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HandshakeStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HandshakeStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = HandshakeStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HandshakeStatus) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SlaveOfCommand) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "masterAddr"
	o = append(o, 0x81, 0xaa, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.MasterAddr)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SlaveOfCommand) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "masterAddr":
			z.MasterAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MasterAddr")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SlaveOfCommand) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.MasterAddr)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SyncHandshake) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "slaveAddr"
	o = append(o, 0x82, 0xa9, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.SlaveAddr)
	// string "slaveOfNoOne"
	o = append(o, 0xac, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x4f, 0x66, 0x4e, 0x6f, 0x4f, 0x6e, 0x65)
	o = msgp.AppendBool(o, z.SlaveOfNoOne)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SyncHandshake) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "slaveAddr":
			z.SlaveAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SlaveAddr")
				return
			}
		case "slaveOfNoOne":
			z.SlaveOfNoOne, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SlaveOfNoOne")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SyncHandshake) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.SlaveAddr) + 13 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SyncHandshakeAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "status"
	o = append(o, 0x83, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendByte(o, byte(z.Status))
	// string "shardID"
	o = append(o, 0xa7, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44)
	o = msgp.AppendString(o, z.ShardID)
	// string "message"
	o = append(o, 0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Message)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SyncHandshakeAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "status":
			{
				var zb0002 byte
				zb0002, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = HandshakeStatus(zb0002)
			}
		case "shardID":
			z.ShardID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ShardID")
				return
			}
		case "message":
			z.Message, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SyncHandshakeAck) Msgsize() (s int) {
	s = 1 + 7 + msgp.ByteSize + 8 + msgp.StringPrefixSize + len(z.ShardID) + 8 + msgp.StringPrefixSize + len(z.Message)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SyncHeartbeat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "masterAddr"
	o = append(o, 0x84, 0xaa, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.MasterAddr)
	// string "slaveAddr"
	o = append(o, 0xa9, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.SlaveAddr)
	// string "shardID"
	o = append(o, 0xa7, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x44)
	o = msgp.AppendString(o, z.ShardID)
	// string "blkSyncOffset"
	o = append(o, 0xad, 0x62, 0x6c, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if z.BlkSyncOffset == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.BlkSyncOffset.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "BlkSyncOffset")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SyncHeartbeat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "masterAddr":
			z.MasterAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MasterAddr")
				return
			}
		case "slaveAddr":
			z.SlaveAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SlaveAddr")
				return
			}
		case "shardID":
			z.ShardID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ShardID")
				return
			}
		case "blkSyncOffset":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.BlkSyncOffset = nil
			} else {
				if z.BlkSyncOffset == nil {
					z.BlkSyncOffset = new(BlockSyncOffset)
				}
				bts, err = z.BlkSyncOffset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlkSyncOffset")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SyncHeartbeat) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.MasterAddr) + 10 + msgp.StringPrefixSize + len(z.SlaveAddr) + 8 + msgp.StringPrefixSize + len(z.ShardID) + 14
	if z.BlkSyncOffset == nil {
		s += msgp.NilSize
	} else {
		s += z.BlkSyncOffset.Msgsize()
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SyncHeartbeatAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "status"
	o = append(o, 0x84, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o, err = z.Status.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// string "message"
	o = append(o, 0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Message)
	// string "blkSyncOffset"
	o = append(o, 0xad, 0x62, 0x6c, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if z.BlkSyncOffset == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.BlkSyncOffset.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "BlkSyncOffset")
			return
		}
	}
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SyncHeartbeatAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "status":
			bts, err = z.Status.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "message":
			z.Message, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "blkSyncOffset":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.BlkSyncOffset = nil
			} else {
				if z.BlkSyncOffset == nil {
					z.BlkSyncOffset = new(BlockSyncOffset)
				}
				bts, err = z.BlkSyncOffset.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlkSyncOffset")
					return
				}
			}
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SyncHeartbeatAck) Msgsize() (s int) {
	s = 1 + 7 + z.Status.Msgsize() + 8 + msgp.StringPrefixSize + len(z.Message) + 14
	if z.BlkSyncOffset == nil {
		s += msgp.NilSize
	} else {
		s += z.BlkSyncOffset.Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}
